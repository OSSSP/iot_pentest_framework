import os
from flask import Flask, request, redirect, url_for
from flask import send_from_directory
from werkzeug import secure_filename
import subprocess
import sys
import json
import pymysql
import requests
from bs4 import BeautifulSoup as bs
import zipfile

UPLOAD_FOLDER = 'C:/Users/bibi/Desktop/iot'
ALLOWED_EXTENSIONS = set(['zip'])

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS

def shutdown_server():
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()

##############json data parsing################
def get_cveid(dump):
    jsonString = json.loads(dump)
    list = set()
    for i in jsonString:
       list.add(i["cveid"])
    return list


#############upload source code for testing#############
@app.route("/", methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if request.form['submit']=='Upload' :
            file = request.files['file']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                global dirpath
                global rfilename
                rfilename=filename[0:-4]
                dirpath='C:/Users/bibi/Desktop/iot/'+rfilename
                filepath='C:/Users/bibi/Desktop/iot/'+filename
                global zipfile
                zipfile = zipfile.ZipFile(filepath)
                zipfile.extractall(dirpath)
                return redirect(url_for('index'))

    sourcelist=[]
    for f in os.listdir(app.config['UPLOAD_FOLDER'],):
        if allowed_file(f):
            sourcelist.append(f)
    return """
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>

    <form action="" method=post enctype=multipart/form-data>
      <p><input type=file name=file multiple=''>
         <input type=submit name='submit' value='Upload'>
    </form>

    <form action="/print" enctype=multipart/form-data>
      <p><input type=submit name='submit' value='Exploit Search'>
    </form>

    <form 
    <p>%s</p>
    """ % "<br>".join(sourcelist)
    

################print matched exploit code#############
@app.route("/print")
def cveprint():
    ###hmark###
    os.chdir("C:/Users/bibi/Downloads/hmark_3.0.4_win_x64")
    os.system("hmark_3.0.4_win_x64.exe -c "+dirpath+" OFF")
    
    #send hidx in C:\Users\bibi\Downloads\hmark_3.0.4_win_x64\hidx
    #receive json data

    url1 = 'https://iotcube.net'
    url2 = 'https://iotcube.net/process/type'
    url3 = 'https://iotcube.net/process/upload/wf1'
    url4 = 'https://iotcube.net/process/start/wf1'
    url5 = 'https://iotcube.net/process/report/wf1/'

    s = requests.Session()
    s.headers['User-agent'] = 'Mozilla/5.0'

    r = s.get(url1)
    html = r.text
    soup = bs(html, 'html.parser')
    token = soup.find('input', {'name': '_token'})
    token_string = token['value']

    s.headers['X-CSRF-TOKEN'] = token_string

    data = {'_method': 'PUT',
             '_token': token_string,
             'processType': 'wf1'}

    r = s.post(url2, data=data)

    headers = {'X-Requested-With': 'XMLHttpRequest'}
    data = {'_token': token_string}
    #files = {'wf1file': ('hashmark_0_linux-4.14.13.hidx', open('hashmark_0_linux-4.14.13.hidx', 'rb'), 'application/octet-stream')}
    files = {'wf1file': ('hashmark_0_'+rfilename+'.hidx', open('C:/Users/bibi/Downloads/hmark_3.0.4_win_x64/hidx/hashmark_0_'+rfilename+'.hidx', 'rb'), 'application/octet-stream')}
    r = s.post(url3, headers=headers, data=data, files=files)

    headers = {'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest'}
    r = s.post(url4, headers=headers)

    hidx = json.loads(r.content)
    hidx = hidx['file']

    url5 = url5 + hidx
    r = s.get(url5, headers=headers)

    html = r.text
    soup = bs(html, 'html.parser')
    href = soup.find('a', {'class': 'ui right floated button'})
    href_url = href['href']

    r = s.get(href_url, headers=headers)

    cvelist = get_cveid(r.text)
    poclist=[]

    conn = pymysql.connect(host='localhost', user='root', password='toor',db='cvepoc',charset='utf8')
    curs = conn.cursor()
    
    for cnum in cvelist:
        sql="select poc from cve where cvenum='"+cnum+"'"
        rows_count = curs.execute(sql)
        if rows_count > 0:
            rows = curs.fetchall()
            poclist.append(rows)

    conn.close()

    return """
    <!doctype html>
    <title>print_poc_page</title>
    <h1>matched exploit code</h1>
    <form
    <p>%s</p>
    """ % "".join(str(poclist))
    

if __name__ == "__main__":
    app.run(host='127.0.0.1', port=5959, debug=True)


